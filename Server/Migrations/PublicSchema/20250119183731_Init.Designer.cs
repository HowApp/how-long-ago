// <auto-generated />
using System;
using How.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace How.Server.Migrations.PublicSchema
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20250119183731_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("How.Core.Database.Entities.Event.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Access")
                        .HasColumnType("integer")
                        .HasColumnName("access");

                    b.Property<Instant?>("ChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at");

                    b.Property<int?>("ChangedById")
                        .HasColumnType("integer")
                        .HasColumnName("changed_by_id");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int?>("StorageImageId")
                        .HasColumnType("integer")
                        .HasColumnName("storage_image_id");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_events_owner_id");

                    b.HasIndex("StorageImageId")
                        .HasDatabaseName("ix_events_storage_image_id");

                    b.ToTable("events", "public");
                });

            modelBuilder.Entity("How.Core.Database.Entities.Event.LikedEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    b.Property<int>("LikedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("liked_by_user_id");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.HasKey("EventId", "LikedByUserId")
                        .HasName("pk_liked_events");

                    b.HasIndex("LikedByUserId")
                        .HasDatabaseName("ix_liked_events_liked_by_user_id");

                    b.HasIndex("EventId", "LikedByUserId")
                        .IsUnique()
                        .HasDatabaseName("ix_liked_events_event_id_liked_by_user_id");

                    b.ToTable("liked_events", "public");
                });

            modelBuilder.Entity("How.Core.Database.Entities.Event.SavedEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("EventId", "UserId")
                        .HasName("pk_saved_events");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_saved_events_user_id");

                    b.HasIndex("EventId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_saved_events_event_id_user_id");

                    b.ToTable("saved_events", "public");
                });

            modelBuilder.Entity("How.Core.Database.Entities.Identity.HowUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("FirstName")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("boolean")
                        .HasColumnName("is_suspended");

                    b.Property<string>("LastName")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("last_name");

                    b.Property<int?>("StorageImageId")
                        .HasColumnType("integer")
                        .HasColumnName("storage_image_id");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.HasIndex("StorageImageId")
                        .HasDatabaseName("ix_users_storage_image_id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_user_id");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("How.Core.Database.Entities.Record.LikedRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .HasColumnType("integer")
                        .HasColumnName("record_id");

                    b.Property<int>("LikedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("liked_by_user_id");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.HasKey("RecordId", "LikedByUserId")
                        .HasName("pk_liked_records");

                    b.HasIndex("LikedByUserId")
                        .HasDatabaseName("ix_liked_records_liked_by_user_id");

                    b.HasIndex("RecordId", "LikedByUserId")
                        .IsUnique()
                        .HasDatabaseName("ix_liked_records_record_id_liked_by_user_id");

                    b.ToTable("liked_records", "public");
                });

            modelBuilder.Entity("How.Core.Database.Entities.Record.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("description");

                    b.Property<int>("EventId")
                        .HasColumnType("integer")
                        .HasColumnName("event_id");

                    b.HasKey("Id")
                        .HasName("pk_records");

                    b.HasIndex("EventId")
                        .HasDatabaseName("ix_records_event_id");

                    b.ToTable("records", "public");
                });

            modelBuilder.Entity("How.Core.Database.Entities.Record.RecordImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("image_id");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<int>("RecordId")
                        .HasColumnType("integer")
                        .HasColumnName("record_id");

                    b.HasKey("Id")
                        .HasName("pk_record_images");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasDatabaseName("ix_record_images_image_id");

                    b.HasIndex("RecordId", "ImageId")
                        .IsUnique()
                        .HasDatabaseName("ix_record_images_record_id_image_id");

                    b.ToTable("record_images", "public");
                });

            modelBuilder.Entity("How.Core.Database.Entities.SharedUser.SharedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UserOwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("user_owner_id");

                    b.Property<int>("UserSharedId")
                        .HasColumnType("integer")
                        .HasColumnName("user_shared_id");

                    b.HasKey("Id")
                        .HasName("pk_shared_users");

                    b.HasIndex("UserSharedId")
                        .HasDatabaseName("ix_shared_users_user_shared_id");

                    b.HasIndex("UserOwnerId", "UserSharedId")
                        .IsUnique()
                        .HasDatabaseName("ix_shared_users_user_owner_id_user_shared_id");

                    b.ToTable("shared_users", "public");
                });

            modelBuilder.Entity("How.Core.Database.Entities.Storage.StorageFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Content")
                        .HasColumnType("bytea")
                        .HasColumnName("content");

                    b.Property<string>("Extension")
                        .HasColumnType("text")
                        .HasColumnName("extension");

                    b.Property<string>("Hash")
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.HasKey("Id")
                        .HasName("pk_storage_files");

                    b.HasIndex("Hash")
                        .IsUnique()
                        .HasDatabaseName("ix_storage_files_hash");

                    b.HasIndex("Path")
                        .IsUnique()
                        .HasDatabaseName("ix_storage_files_path");

                    b.ToTable("storage_files", "public");
                });

            modelBuilder.Entity("How.Core.Database.Entities.Storage.StorageImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ImageHeight")
                        .HasColumnType("integer")
                        .HasColumnName("image_height");

                    b.Property<int>("ImageWidth")
                        .HasColumnType("integer")
                        .HasColumnName("image_width");

                    b.Property<int>("MainId")
                        .HasColumnType("integer")
                        .HasColumnName("main_id");

                    b.Property<int>("ThumbnailHeight")
                        .HasColumnType("integer")
                        .HasColumnName("thumbnail_height");

                    b.Property<int>("ThumbnailId")
                        .HasColumnType("integer")
                        .HasColumnName("thumbnail_id");

                    b.Property<int>("ThumbnailWidth")
                        .HasColumnType("integer")
                        .HasColumnName("thumbnail_width");

                    b.HasKey("Id")
                        .HasName("pk_storage_images");

                    b.HasIndex("MainId")
                        .IsUnique()
                        .HasDatabaseName("ix_storage_images_main_id");

                    b.HasIndex("ThumbnailId")
                        .IsUnique()
                        .HasDatabaseName("ix_storage_images_thumbnail_id");

                    b.ToTable("storage_images", "public");
                });

            modelBuilder.Entity("How.Core.Database.Entities.Event.Event", b =>
                {
                    b.HasOne("How.Core.Database.Entities.Identity.HowUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_events_users_owner_id");

                    b.HasOne("How.Core.Database.Entities.Storage.StorageImage", "StorageImage")
                        .WithMany()
                        .HasForeignKey("StorageImageId")
                        .HasConstraintName("fk_events_storage_images_storage_image_id");

                    b.Navigation("Owner");

                    b.Navigation("StorageImage");
                });

            modelBuilder.Entity("How.Core.Database.Entities.Event.LikedEvent", b =>
                {
                    b.HasOne("How.Core.Database.Entities.Event.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_liked_events_events_event_id");

                    b.HasOne("How.Core.Database.Entities.Identity.HowUser", "LikedByUser")
                        .WithMany()
                        .HasForeignKey("LikedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_liked_events_users_liked_by_user_id");

                    b.Navigation("Event");

                    b.Navigation("LikedByUser");
                });

            modelBuilder.Entity("How.Core.Database.Entities.Event.SavedEvent", b =>
                {
                    b.HasOne("How.Core.Database.Entities.Event.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_saved_events_events_event_id");

                    b.HasOne("How.Core.Database.Entities.Identity.HowUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_saved_events_users_user_id");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("How.Core.Database.Entities.Identity.HowUser", b =>
                {
                    b.HasOne("How.Core.Database.Entities.Storage.StorageImage", "StorageImage")
                        .WithMany()
                        .HasForeignKey("StorageImageId")
                        .HasConstraintName("fk_users_storage_images_storage_image_id");

                    b.Navigation("StorageImage");
                });

            modelBuilder.Entity("How.Core.Database.Entities.Record.LikedRecord", b =>
                {
                    b.HasOne("How.Core.Database.Entities.Identity.HowUser", "LikedByUser")
                        .WithMany()
                        .HasForeignKey("LikedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_liked_records_users_liked_by_user_id");

                    b.HasOne("How.Core.Database.Entities.Record.Record", "Record")
                        .WithMany()
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_liked_records_records_record_id");

                    b.Navigation("LikedByUser");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("How.Core.Database.Entities.Record.Record", b =>
                {
                    b.HasOne("How.Core.Database.Entities.Event.Event", "Event")
                        .WithMany("Records")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_records_events_event_id");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("How.Core.Database.Entities.Record.RecordImage", b =>
                {
                    b.HasOne("How.Core.Database.Entities.Storage.StorageImage", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_record_images_storage_images_image_id");

                    b.HasOne("How.Core.Database.Entities.Record.Record", "Record")
                        .WithMany("RecordImages")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_record_images_records_record_id");

                    b.Navigation("Image");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("How.Core.Database.Entities.SharedUser.SharedUser", b =>
                {
                    b.HasOne("How.Core.Database.Entities.Identity.HowUser", "UserOwner")
                        .WithMany()
                        .HasForeignKey("UserOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_shared_users_users_user_owner_id");

                    b.HasOne("How.Core.Database.Entities.Identity.HowUser", "UserShared")
                        .WithMany()
                        .HasForeignKey("UserSharedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_shared_users_users_user_shared_id");

                    b.Navigation("UserOwner");

                    b.Navigation("UserShared");
                });

            modelBuilder.Entity("How.Core.Database.Entities.Storage.StorageImage", b =>
                {
                    b.HasOne("How.Core.Database.Entities.Storage.StorageFile", "Main")
                        .WithMany()
                        .HasForeignKey("MainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_storage_images_storage_files_main_id");

                    b.HasOne("How.Core.Database.Entities.Storage.StorageFile", "Thumbnail")
                        .WithMany()
                        .HasForeignKey("ThumbnailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_storage_images_storage_files_thumbnail_id");

                    b.Navigation("Main");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("How.Core.Database.Entities.Event.Event", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("How.Core.Database.Entities.Record.Record", b =>
                {
                    b.Navigation("RecordImages");
                });
#pragma warning restore 612, 618
        }
    }
}
